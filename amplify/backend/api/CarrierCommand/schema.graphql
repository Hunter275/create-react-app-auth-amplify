schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Game @aws_auth(cognito_groups: ["Manage-only"]) {
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  _version: Int!
  created: String!
  createdAt: AWSDateTime!
  creator: String!
  id: ID!
  invite: String!
  password: String!
  players: Int!
  reports: Int!
  title: String!
  updatedAt: AWSDateTime!
}

type ModelGameConnection @aws_auth(cognito_groups: ["Manage-only"]) {
  items: [Game]
  nextToken: String
  startedAt: AWSTimestamp
}

type Mutation {
  createGame(condition: ModelGameConditionInput, input: CreateGameInput!): Game @aws_auth(cognito_groups: ["Manage-only"])
  deleteGame(condition: ModelGameConditionInput, input: DeleteGameInput!): Game @aws_auth(cognito_groups: ["Manage-only"])
  updateGame(condition: ModelGameConditionInput, input: UpdateGameInput!): Game @aws_auth(cognito_groups: ["Manage-only"])
}

type Query {
  getGame(id: ID!): Game @aws_auth(cognito_groups: ["Manage-only"])
  listGames(filter: ModelGameFilterInput, limit: Int, nextToken: String): ModelGameConnection @aws_auth(cognito_groups: ["Manage-only"])
  syncGames(filter: ModelGameFilterInput, lastSync: AWSTimestamp, limit: Int, nextToken: String): ModelGameConnection @aws_auth(cognito_groups: ["Manage-only"])
}

type Subscription {
  onCreateGame: Game @aws_auth(cognito_groups: ["Manage-only"]) @aws_subscribe(mutations : ["createGame"])
  onDeleteGame: Game @aws_auth(cognito_groups: ["Manage-only"]) @aws_subscribe(mutations : ["deleteGame"])
  onUpdateGame: Game @aws_auth(cognito_groups: ["Manage-only"]) @aws_subscribe(mutations : ["updateGame"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateGameInput {
  _version: Int
  created: String!
  creator: String!
  id: ID
  invite: String!
  password: String!
  players: Int!
  reports: Int!
  title: String!
}

input DeleteGameInput {
  _version: Int
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelGameConditionInput {
  and: [ModelGameConditionInput]
  created: ModelStringInput
  creator: ModelStringInput
  invite: ModelStringInput
  not: ModelGameConditionInput
  or: [ModelGameConditionInput]
  password: ModelStringInput
  players: ModelIntInput
  reports: ModelIntInput
  title: ModelStringInput
}

input ModelGameFilterInput {
  and: [ModelGameFilterInput]
  created: ModelStringInput
  creator: ModelStringInput
  id: ModelIDInput
  invite: ModelStringInput
  not: ModelGameFilterInput
  or: [ModelGameFilterInput]
  password: ModelStringInput
  players: ModelIntInput
  reports: ModelIntInput
  title: ModelStringInput
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input UpdateGameInput {
  _version: Int
  created: String
  creator: String
  id: ID!
  invite: String
  password: String
  players: Int
  reports: Int
  title: String
}
